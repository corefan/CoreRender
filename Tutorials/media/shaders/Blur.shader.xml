<Shader>
	<Text name="VS_COPY">
	<![CDATA[
		attribute vec2 pos;
		attribute vec2 texcoord0;
		varying vec2 texcoord;
		void main()
		{
			texcoord = (pos + vec2(1.0, 1.0)) * 0.5;
			gl_Position = vec4(pos, 0.0, 1.0);
		}
	]]>
	</Text>
	<Text name="FS_COPY">
	<![CDATA[
		varying vec2 texcoord;
		uniform sampler2D source;
		void main()
		{
			gl_FragColor = texture2D(source, texcoord);
		}
	]]>
	</Text>

	<Text name="VS_HBLUR">
	<![CDATA[
		attribute vec2 pos;
		varying vec3 texcoord[9];
		uniform vec2 frameBufSize;
		void main()
		{
			vec2 texcoord0 = (pos + vec2(1.0, 1.0)) * 0.5;
			float offsets[4];
			float weights[5];
			weights[0] = 0.1595769122;
			weights[1] = 0.2631846772;
			weights[2] = 0.1220427559;
			weights[3] = 0.0305541987;
			weights[4] = 0.0041198159;

			offsets[0] = 1.4402863507;
			offsets[1] = 3.3635474597;
			offsets[2] = 5.2931777789;
			offsets[3] = 7.2314752165;

			offsets[0] /= frameBufSize.x;
			offsets[1] /= frameBufSize.x;
			offsets[2] /= frameBufSize.x;
			offsets[3] /= frameBufSize.x;
			// Calculate texture coords for different samples
			texcoord[0] = vec3(texcoord0.x - offsets[3], texcoord0.y, weights[4]);
			texcoord[1] = vec3(texcoord0.x - offsets[2], texcoord0.y, weights[3]);
			texcoord[2] = vec3(texcoord0.x - offsets[1], texcoord0.y, weights[2]);
			texcoord[3] = vec3(texcoord0.x - offsets[0], texcoord0.y, weights[1]);
			texcoord[4] = vec3(texcoord0, weights[0]);
			texcoord[5] = vec3(texcoord0.x + offsets[0], texcoord0.y, weights[1]);
			texcoord[6] = vec3(texcoord0.x + offsets[1], texcoord0.y, weights[2]);
			texcoord[7] = vec3(texcoord0.x + offsets[2], texcoord0.y, weights[3]);
			texcoord[8] = vec3(texcoord0.x + offsets[3], texcoord0.y, weights[4]);
			// Pass position
			gl_Position = vec4(pos, 0.0, 1.0);
		}
	]]>
	</Text>
	<Text name="VS_VBLUR">
	<![CDATA[
		attribute vec2 pos;
		varying vec3 texcoord[9];
		uniform vec2 frameBufSize;
		void main()
		{
			vec2 texcoord0 = (pos + vec2(1.0, 1.0)) * 0.5;
			float offsets[4];
			float weights[5];
			weights[0] = 0.1595769122;
			weights[1] = 0.2631846772;
			weights[2] = 0.1220427559;
			weights[3] = 0.0305541987;
			weights[4] = 0.0041198159;

			offsets[0] = 1.4402863507;
			offsets[1] = 3.3635474597;
			offsets[2] = 5.2931777789;
			offsets[3] = 7.2314752165;

			offsets[0] /= frameBufSize.y;
			offsets[1] /= frameBufSize.y;
			offsets[2] /= frameBufSize.y;
			offsets[3] /= frameBufSize.y;
			// Calculate texture coords for different samples
			texcoord[0] = vec3(texcoord0.x, texcoord0.y - offsets[3], weights[4]);
			texcoord[1] = vec3(texcoord0.x, texcoord0.y - offsets[2], weights[3]);
			texcoord[2] = vec3(texcoord0.x, texcoord0.y - offsets[1], weights[2]);
			texcoord[3] = vec3(texcoord0.x, texcoord0.y - offsets[0], weights[1]);
			texcoord[4] = vec3(texcoord0, weights[0]);
			texcoord[5] = vec3(texcoord0.x, texcoord0.y + offsets[0], weights[1]);
			texcoord[6] = vec3(texcoord0.x, texcoord0.y + offsets[1], weights[2]);
			texcoord[7] = vec3(texcoord0.x, texcoord0.y + offsets[2], weights[3]);
			texcoord[8] = vec3(texcoord0.x, texcoord0.y + offsets[3], weights[4]);
			// Pass position
			gl_Position = vec4(pos, 0.0, 1.0);
		}
	]]>
	</Text>
	<Text name="FS_BLUR">
	<![CDATA[
		varying vec3 texcoord[9];
		uniform sampler2D source;
		void main()
		{
			gl_FragColor.rgb = texture2D(source, texcoord[0].xy).rgb * texcoord[0].z
				+ texture2D(source, texcoord[1].xy).rgb * texcoord[1].z
				+ texture2D(source, texcoord[2].xy).rgb * texcoord[2].z
				+ texture2D(source, texcoord[3].xy).rgb * texcoord[3].z
				+ texture2D(source, texcoord[4].xy).rgb * texcoord[4].z
				+ texture2D(source, texcoord[5].xy).rgb * texcoord[5].z
				+ texture2D(source, texcoord[6].xy).rgb * texcoord[6].z
				+ texture2D(source, texcoord[7].xy).rgb * texcoord[7].z
				+ texture2D(source, texcoord[8].xy).rgb * texcoord[8].z;
		}
	]]>
	</Text>

	<Attrib name="pos" />

	<Texture name="source" />

	<Context name="COPY_COLOR" vs="VS_COPY" fs="FS_COPY">
		<Depth write="false" test="Always" />
	</Context>
	<Context name="HORIZONTAL_BLUR" vs="VS_HBLUR" fs="FS_BLUR">
		<Depth write="false" test="Always" />
	</Context>
	<Context name="VERTICAL_BLUR" vs="VS_VBLUR" fs="FS_BLUR">
		<Depth write="false" test="Always" />
	</Context>
</Shader>
