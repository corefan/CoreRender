<Shader>
	<Flag name="Skinning" default="false" />

	<Text name="VS_GENERAL">
	<![CDATA[
		#include "utility/defaultUniforms.glsl"
		attribute vec3 pos;
		attribute vec3 normal;
		attribute vec2 texcoord0;
		#if Skinning
		attribute vec4 jointindex;
		attribute vec4 jointweight;
		uniform mat4 skinMat[50];
		#endif
		varying vec2 texcoord;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		void main()
		{
			// Transformation
			texcoord = texcoord0;
			vec4 translated = transMat * vec4(pos, 1.0);
			worldPos = translated.xyz / translated.w;
			translated = transMat * vec4(normal, 0.0);
			worldNormal = translated.xyz;
			#if Skinning
			// Skinning
			mat4 mat = mat4(0.0);
			for (int i = 0; i < 4; i++)
			{
				mat += skinMat[int(jointindex[i])] * jointweight[i];
			}
			vec4 skinpos = mat * vec4(pos, 1.0);
			gl_Position = worldMat * skinpos;
			#else
			gl_Position = worldMat * vec4(pos, 1.0);
			#endif
		}
	]]>
	</Text>
	<Text name="FS_AMBIENT">
	<![CDATA[
		varying vec2 texcoord;
		uniform sampler2D tex;
		void main()
		{
			gl_FragColor = texture2D(tex, texcoord);
		}
	]]>
	</Text>
	<Text name="FS_POINTLIGHT">
	<![CDATA[
		varying vec2 texcoord;
		uniform sampler2D tex;
		uniform vec3 lightPos;
		uniform float lightRadius;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		uniform vec3 lightColor;
		void main()
		{
			vec3 lightVec = lightPos - worldPos;
			float lightDist = length(lightVec);
			lightVec /= lightDist;
			// Compute attenuation
			lightDist = lightDist / lightRadius;
			float attenuation = max(dot(lightVec, normalize(worldNormal)), 0.0) * (1.0 - lightDist * lightDist);
			gl_FragColor.rgb = texture2D(tex, texcoord).rgb * lightColor * attenuation;
		}
	]]>
	</Text>
	<Text name="FS_SPOTLIGHT">
	<![CDATA[
		varying vec2 texcoord;
		uniform sampler2D tex;
		uniform vec3 lightPos;
		uniform float lightRadius;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		uniform vec3 lightColor;
		uniform float lightAngle;
		uniform vec3 lightDir;
		void main()
		{
			vec3 lightVec = lightPos - worldPos;
			float lightDist = length(lightVec);
			lightVec /= lightDist;
			vec3 normal = normalize(worldNormal);
			// Compute attenuation
			lightDist = lightDist / lightRadius;
			float attenuation = max(dot(lightVec, normal), 0.0) * (1.0 - lightDist * lightDist);
			float angle = dot(lightVec, -lightDir);
			attenuation *= clamp((angle - lightAngle) * 5.0, 0.0, 1.0);
			gl_FragColor.rgb = texture2D(tex, texcoord).rgb * lightColor * attenuation;
		}
	]]>
	</Text>

	<Attrib name="pos" />
	<Attrib name="normal" />
	<Attrib name="texcoord0" />
	<Attrib name="jointindex" />
	<Attrib name="jointweight" />

	<Uniform name="worldMat" type="mat4" />
	<Uniform name="skinMat" count="50" type="mat4" />
	<Uniform name="lightPos" type="float3" />
	<Uniform name="lightRadius" type="float1" />
	<Uniform name="lightDir" type="float3" />
	<Uniform name="lightAngle" type="float1" />
	<Uniform name="lightColor" type="float3" />

	<Texture name="tex" />

	<Context name="AMBIENT" vs="VS_GENERAL" fs="FS_AMBIENT" />
	<Context name="POINTLIGHT" vs="VS_GENERAL" fs="FS_POINTLIGHT">
		<Depth write="false" test="LessEqual" />
		<Blend mode="Add" />
	</Context>
	<Context name="SPOTLIGHT" vs="VS_GENERAL" fs="FS_SPOTLIGHT">
		<Depth write="false" test="LessEqual" />
		<Blend mode="Add" />
	</Context>
</Shader>
