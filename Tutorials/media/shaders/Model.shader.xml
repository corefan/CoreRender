<Shader>
	<Flag name="Skinning" default="false" />
	<Flag name="Instancing" default="false" />

	<Text name="VS_GENERAL">
	<![CDATA[
		#include "utility/vsCommon.glsl"
		attribute vec3 pos;
		attribute vec3 normal;
		attribute vec2 texcoord0;
		varying vec2 texcoord;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		void main()
		{
			texcoord = texcoord0;
			vec4 vertexPos = getWorldPos(getSkinningPos(vec4(pos, 1.0)));
			worldPos = vertexPos.xyz / vertexPos.w;
			// TODO: Proper normal matrix
			worldNormal = getWorldPos(getSkinningPos(vec4(normal, 0.0))).xyz;

			gl_Position = viewProjMat * vertexPos;
		}
	]]>
	</Text>
	<Text name="FS_AMBIENT">
	<![CDATA[
		uniform sampler2D tex;
		uniform vec4 ambientLight;
		varying vec2 texcoord;
		void main()
		{
			gl_FragColor = texture2D(tex, texcoord) * ambientLight;
		}
	]]>
	</Text>
	<Text name="FS_ATTRIBPASS">
	<![CDATA[
		uniform sampler2D tex;
		varying vec2 texcoord;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		void main()
		{
			gl_FragData[0].rgb = worldPos;
			gl_FragData[1].rgb = worldNormal;
			gl_FragData[2] = texture2D(tex, texcoord);
		}
	]]>
	</Text>
	<Text name="FS_POINTLIGHT">
	<![CDATA[
		varying vec2 texcoord;
		uniform sampler2D tex;
		uniform vec4 lightPos;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		uniform vec4 lightColor;
		void main()
		{
			vec3 lightVec = lightPos.xyz - worldPos;
			float lightDist = length(lightVec);
			lightVec /= vec3(lightDist);
			// Compute attenuation
			lightDist = lightDist / lightPos.w;
			float attenuation = max(dot(lightVec, normalize(worldNormal)), 0.0) * (1.0 - lightDist * lightDist);
			gl_FragColor.rgb = texture2D(tex, texcoord).rgb * lightColor.rgb * attenuation;
		}
	]]>
	</Text>
	<Text name="FS_SPOTLIGHT">
	<![CDATA[
		uniform sampler2DShadow shadowMap;
		uniform mat4 shadowMat;

		varying vec2 texcoord;
		uniform sampler2D tex;
		uniform vec4 lightPos;
		varying vec3 worldPos;
		varying vec3 worldNormal;
		uniform vec4 lightColor;
		uniform vec3 lightDir;
		void main()
		{
			// Get light data
			vec3 lightVec = lightPos.xyz - worldPos;
			float lightDist = length(lightVec);
			lightVec /= lightDist;
			vec3 normal = normalize(worldNormal);

			// Compute attenuation
			lightDist = lightDist / lightPos.w;
			float attenuation = max(dot(lightVec, normal), 0.0) * (1.0 - lightDist * lightDist);
			float lightAngle = lightColor.w;
			float angle = dot(lightVec, -lightDir);
			attenuation *= clamp((angle - lightAngle) * 5.0, 0.0, 1.0);

			// Get shadow
			vec4 shadowPos = shadowMat * vec4(worldPos, 1.0);
			shadowPos.z = lightDist;
			shadowPos.xy /= shadowPos.w;

			float shadow = shadow2D(shadowMap, shadowPos.xyz).r;

			// Assemble result
			gl_FragColor.rgb = texture2D(tex, texcoord).rgb * lightColor.rgb * attenuation * shadow;
		}
	]]>
	</Text>

	<Text name="VS_SHADOWMAP">
	<![CDATA[
		#include "utility/vsCommon.glsl"
		attribute vec3 pos;
		varying float depth;
		void main()
		{
			vec4 vertexPos = getWorldPos(getSkinningPos(vec4(pos, 1.0)));
			vec3 worldPos = vertexPos.xyz / vertexPos.w;
			depth = length(lightPos.xyz - worldPos) / lightPos.w;

			gl_Position = viewProjMat * vertexPos;
		}
	]]>
	</Text>
	<Text name="FS_SHADOWMAP">
	<![CDATA[
		varying float depth;
		void main()
		{
			// TODO: Proper bias here
			gl_FragDepth = depth + 0.0001;
		}
	]]>
	</Text>

	<Attrib name="pos" />
	<Attrib name="normal" />
	<Attrib name="texcoord0" />
	<Attrib name="jointindex" />
	<Attrib name="jointweight" />

	<Uniform name="ambientLight" type="float4">
		0.2, 0.2, 0.2, 1.0
	</Uniform>

	<Texture name="tex" />

	<Context name="AMBIENT" vs="VS_GENERAL" fs="FS_AMBIENT" />
	<Context name="ATTRIBPASS" vs="VS_GENERAL" fs="FS_ATTRIBPASS" />
	<Context name="POINTLIGHT" vs="VS_GENERAL" fs="FS_POINTLIGHT">
		<Depth write="false" test="LessEqual" />
		<Blend mode="Add" />
	</Context>
	<Context name="SPOTLIGHT" vs="VS_GENERAL" fs="FS_SPOTLIGHT">
		<Depth write="false" test="LessEqual" />
		<Blend mode="Add" />
	</Context>
	<Context name="SHADOWMAP" vs="VS_SHADOWMAP" fs="FS_SHADOWMAP" />
</Shader>
